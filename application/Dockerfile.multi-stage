# Multi-stage build for production optimization
FROM golang:1.21-alpine AS dependencies

WORKDIR /app
COPY go.mod go.sum ./
RUN go mod download

FROM golang:1.21-alpine AS builder

WORKDIR /app
COPY --from=dependencies /go/pkg /go/pkg
COPY . .

# Build with optimizations
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -ldflags='-w -s -extldflags "-static"' \
    -a -installsuffix cgo \
    -o main cmd/server/main.go

FROM scratch

# Copy CA certificates for HTTPS requests
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Copy the binary
COPY --from=builder /app/main /main

# Copy migrations
COPY --from=builder /app/migrations /migrations

# Expose port
EXPOSE 8080

# Run the binary
ENTRYPOINT ["/main"]