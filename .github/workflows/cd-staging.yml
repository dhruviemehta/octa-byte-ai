name: Deploy to Staging

on:
  push:
    branches: [ staging ]
  workflow_run:
    workflows: ["Continuous Integration"]
    types: [ completed ]
    branches: [ staging ]

env:
  AWS_REGION: ap-south-1
  ENVIRONMENT: staging
  ECR_REPOSITORY: staging-go-microservice

jobs:
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'push'
    
    outputs:
      alb-dns: ${{ steps.terraform.outputs.alb_dns_name }}
      ecr-repo-url: ${{ steps.terraform.outputs.ecr_repository_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        terraform_wrapper: false

    - name: Terraform Init
      working-directory: ./terraform/environments/staging
      run: terraform init

    - name: Terraform Plan
      working-directory: ./terraform/environments/staging
      run: terraform plan -var-file="terraform.tfvars" -out=tfplan

    - name: Terraform Apply
      working-directory: ./terraform/environments/staging
      run: terraform apply -auto-approve tfplan

    - name: Get Terraform Outputs
      id: terraform
      working-directory: ./terraform/environments/staging
      run: |
        echo "alb_dns_name=$(terraform output -raw alb_dns_name)" >> $GITHUB_OUTPUT
        echo "ecr_repository_url=$(terraform output -raw ecr_repository_url)" >> $GITHUB_OUTPUT

  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ env.ENVIRONMENT }}-{{date 'YYYYMMDD-HHmmss'}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./application
        file: ./application/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Scan Docker image for vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
        format: 'sarif'
        output: 'trivy-image-results.sarif'

    - name: Upload Docker image scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-image-results.sarif'

  deploy-application:
    name: Deploy Application to ECS
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, build-and-push]
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Force ECS service deployment
      run: |
        aws ecs update-service \
          --cluster ${{ env.ENVIRONMENT }}-cluster \
          --service ${{ env.ENVIRONMENT }}-go-microservice-service \
          --force-new-deployment \
          --region ${{ env.AWS_REGION }}

    - name: Wait for deployment to complete
      run: |
        echo "‚è≥ Waiting for ECS service to stabilize..."
        aws ecs wait services-stable \
          --cluster ${{ env.ENVIRONMENT }}-cluster \
          --services ${{ env.ENVIRONMENT }}-go-microservice-service \
          --region ${{ env.AWS_REGION }} \
          --cli-read-timeout 900 \
          --cli-connect-timeout 60

  create-database-table:
    name: Initialize Database
    runs-on: ubuntu-latest
    needs: deploy-application
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create database table via ECS task
      run: |
        # Get a running task ARN
        TASK_ARN=$(aws ecs list-tasks \
          --cluster ${{ env.ENVIRONMENT }}-cluster \
          --service-name ${{ env.ENVIRONMENT }}-go-microservice-service \
          --desired-status RUNNING \
          --query 'taskArns[0]' \
          --output text \
          --region ${{ env.AWS_REGION }})
        
        if [ "$TASK_ARN" != "None" ] && [ "$TASK_ARN" != "" ]; then
          echo "Found running task: $TASK_ARN"
          
          # Enable execute command capability
          aws ecs update-service \
            --cluster ${{ env.ENVIRONMENT }}-cluster \
            --service ${{ env.ENVIRONMENT }}-go-microservice-service \
            --enable-execute-command \
            --region ${{ env.AWS_REGION }}
          
          # Wait a moment for the update
          sleep 30
          
          echo "Creating database table..."
          # Create table using ECS exec
          aws ecs execute-command \
            --cluster ${{ env.ENVIRONMENT }}-cluster \
            --task $TASK_ARN \
            --container go-microservice \
            --command "sh -c 'apk add postgresql-client && psql -h \$DB_HOST -U \$DB_USER -d \$DB_NAME -c \"CREATE TABLE IF NOT EXISTS users (id SERIAL PRIMARY KEY, name VARCHAR(100) NOT NULL, email VARCHAR(255) NOT NULL UNIQUE, created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(), updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()); CREATE INDEX IF NOT EXISTS idx_users_email ON users(email); SELECT \\\"Table created successfully!\\\" as status;\"'" \
            --interactive \
            --region ${{ env.AWS_REGION }} || echo "Table creation failed or already exists"
        else
          echo "No running tasks found"
        fi

  integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, deploy-application, create-database-table]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Run integration tests against staging
      working-directory: ./application
      env:
        API_BASE_URL: http://${{ needs.deploy-infrastructure.outputs.alb-dns }}
      run: |
        go test -v ./tests/integration/... -tags=integration

    - name: Health check and smoke tests
      run: |
        ALB_DNS="${{ needs.deploy-infrastructure.outputs.alb-dns }}"
        
        echo "üè• Running health checks against: http://$ALB_DNS"
        
        # Health check with retries
        for i in {1..30}; do
          if curl -f "http://$ALB_DNS/health"; then
            echo "‚úÖ Health check passed"
            break
          fi
          echo "‚è≥ Health check attempt $i/30 failed, retrying in 10 seconds..."
          sleep 10
        done
        
        # API functionality tests
        echo "üß™ Testing API endpoints..."
        
        # Test users endpoint
        curl -f "http://$ALB_DNS/api/users" || echo "Users endpoint test failed"
        
        # Test metrics endpoint
        curl -f "http://$ALB_DNS/metrics" || echo "Metrics endpoint test failed"
        
        # Test creating a user
        curl -f -X POST "http://$ALB_DNS/api/users" \
          -H "Content-Type: application/json" \
          -d '{"name":"GitHub Action Test","email":"github-action@example.com"}' || echo "Create user test failed"

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, deploy-application, integration-tests]
    if: always()
    
    steps:
    - name: Notify Slack on Success
      if: needs.deploy-application.result == 'success' && needs.integration-tests.result == 'success'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        text: |
          üöÄ Staging deployment successful!
          
          üåç Environment: ${{ env.ENVIRONMENT }}
          üîó URL: http://${{ needs.deploy-infrastructure.outputs.alb-dns }}
          üê≥ Image: ${{ needs.build-and-push.outputs.image-tag }}
          üíæ Commit: ${{ github.sha }}
          üìä Branch: ${{ github.ref_name }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify Slack on Failure
      if: needs.deploy-application.result == 'failure' || needs.integration-tests.result == 'failure'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#deployments'
        text: |
          ‚ùå Staging deployment failed!
          
          üåç Environment: ${{ env.ENVIRONMENT }}
          üíæ Commit: ${{ github.sha }}
          üìä Branch: ${{ github.ref_name }}
          
          üîç Check logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}