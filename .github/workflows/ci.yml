name: Continuous Integration

on:
  pull_request:
    branches: [ staging ]
  push:
    branches: [ staging ]

env:
  GO_VERSION: '1.21'
  DOCKER_BUILDKIT: 1
  AWS_REGION: ap-south-1

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('application/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      working-directory: ./application
      run: go mod download

    - name: Run go vet
      working-directory: ./application
      run: go vet ./...

    - name: Run go fmt check
      working-directory: ./application
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Go code is not formatted:"
          gofmt -s -l .
          exit 1
        fi

    - name: Run unit tests
      working-directory: ./application
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: testdb
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_SSL_MODE: disable
      run: |
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-${{ github.sha }}
        path: application/coverage.html

    - name: Check test coverage
      working-directory: ./application
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
        echo "Test coverage: $COVERAGE%"
        echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
        if (( $(echo "$COVERAGE < 70" | bc -l) )); then
          echo "❌ Test coverage is below 70%"
          exit 1
        fi
        echo "✅ Test coverage is $COVERAGE% (above 70%)"

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec.sarif ./application/...'

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: gosec.sarif

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './application'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image for testing
      uses: docker/build-push-action@v5
      with:
        context: ./application
        file: ./application/Dockerfile
        push: false
        tags: go-microservice:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm -d --name test-app \
          -e PORT=8080 \
          -e DB_HOST=localhost \
          -e DB_PORT=5432 \
          -e DB_NAME=testdb \
          -e DB_USER=test \
          -e DB_PASSWORD=test \
          -e DB_SSL_MODE=disable \
          -p 8080:8080 \
          go-microservice:test
        
        # Wait for app to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8080/health || exit 1
        
        # Stop container
        docker stop test-app

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, security-scan, build]
    if: always()
    
    steps:
    - name: Notify Slack on Success
      if: needs.test.result == 'success' && needs.security-scan.result == 'success' && needs.build.result == 'success'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#devops'
        text: |
          ✅ CI Pipeline passed for ${{ github.ref }}
          
          📊 Test Coverage: ${{ env.COVERAGE }}%
          🔒 Security: All scans passed
          🐳 Docker: Build successful
          💾 Commit: ${{ github.sha }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify Slack on Failure
      if: needs.test.result == 'failure' || needs.security-scan.result == 'failure' || needs.build.result == 'failure'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#devops'
        text: |
          ❌ CI Pipeline failed for ${{ github.ref }}
          
          🧪 Tests: ${{ needs.test.result }}
          🔒 Security: ${{ needs.security-scan.result }}
          🐳 Build: ${{ needs.build.result }}
          💾 Commit: ${{ github.sha }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
