name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
      version:
        description: 'Version/tag to deploy (latest, or specific tag like v1.2.3)'
        required: true
        default: 'latest'
      skip_tests:
        description: 'Skip integration tests (emergency deployment)'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: ap-south-1
  ENVIRONMENT: production
  ECR_REPOSITORY: production-go-microservice

jobs:
  manual-approval:
    name: Production Deployment Approval
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Request Manual Approval
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ github.TOKEN }}
        approvers: devops-team,platform-team
        minimum-approvals: 2
        issue-title: "üöÄ Production Deployment Approval Required"
        issue-body: |
          ## Production Deployment Request
          
          **üìã Deployment Details:**
          - **Version**: `${{ github.event.inputs.version }}`
          - **Branch**: `${{ github.ref_name }}`
          - **Commit**: `${{ github.sha }}`
          - **Requested by**: @${{ github.actor }}
          - **Skip Tests**: ${{ github.event.inputs.skip_tests }}
          
          **‚ö†Ô∏è Pre-deployment Checklist:**
          - [ ] Staging environment is healthy
          - [ ] Database backup completed
          - [ ] Rollback plan prepared
          - [ ] Monitoring alerts configured
          
          **üîç Review Links:**
          - [GitHub Action Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [Staging Environment](http://staging-alb-1556432877.ap-south-1.elb.amazonaws.com/health)
          
          Please review and approve this production deployment.

  pre-deployment-checks:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    needs: manual-approval
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Verify staging environment health
      run: |
        echo "üîç Verifying staging environment health..."
        STAGING_URL="http://staging-alb-1556432877.ap-south-1.elb.amazonaws.com"
        
        if curl -f "$STAGING_URL/health"; then
          echo "‚úÖ Staging environment is healthy"
        else
          echo "‚ùå Staging environment is unhealthy"
          exit 1
        fi

    - name: Check for critical alerts
      run: |
        echo "üö® Checking for critical alerts..."
        
        # Check CloudWatch alarms
        CRITICAL_ALARMS=$(aws cloudwatch describe-alarms \
          --state-value ALARM \
          --alarm-names staging-high-cpu-utilization staging-high-memory-utilization \
          --query 'MetricAlarms[?StateValue==`ALARM`].AlarmName' \
          --output text \
          --region ${{ env.AWS_REGION }})
        
        if [ -n "$CRITICAL_ALARMS" ]; then
          echo "‚ùå Critical alarms detected: $CRITICAL_ALARMS"
          exit 1
        else
          echo "‚úÖ No critical alarms detected"
        fi

    - name: Validate production infrastructure
      working-directory: ./terraform/environments/production
      run: |
        echo "üèóÔ∏è Validating production infrastructure..."
        terraform init
        terraform validate
        terraform plan -var-file="terraform.tfvars" -detailed-exitcode || EXIT_CODE=$?
        
        if [ $EXIT_CODE -eq 1 ]; then
          echo "‚ùå Terraform plan failed"
          exit 1
        elif [ $EXIT_CODE -eq 2 ]; then
          echo "‚ö†Ô∏è Infrastructure changes detected in plan"
        else
          echo "‚úÖ Infrastructure is up to date"
        fi

  backup-database:
    name: Create Database Backup
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    
    outputs:
      backup-id: ${{ steps.backup.outputs.snapshot-id }}
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create RDS Snapshot
      id: backup
      run: |
        SNAPSHOT_ID="production-backup-$(date +%Y%m%d%H%M%S)"
        echo "üìã Creating RDS snapshot: $SNAPSHOT_ID"
        
        aws rds create-db-snapshot \
          --db-instance-identifier production-postgres \
          --db-snapshot-identifier $SNAPSHOT_ID \
          --region ${{ env.AWS_REGION }}
        
        echo "snapshot-id=$SNAPSHOT_ID" >> $GITHUB_OUTPUT
        echo "‚úÖ Database backup initiated: $SNAPSHOT_ID"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, backup-database]
    environment: production
    
    outputs:
      alb-dns: ${{ steps.terraform.outputs.alb_dns_name }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        terraform_wrapper: false

    - name: Deploy Infrastructure
      working-directory: ./terraform/environments/production
      run: |
        terraform init
        terraform plan -var-file="terraform.tfvars"
        terraform apply -auto-approve -var-file="terraform.tfvars"

    - name: Get Terraform Outputs
      id: terraform
      working-directory: ./terraform/environments/production
      run: |
        echo "alb_dns_name=$(terraform output -raw alb_dns_name)" >> $GITHUB_OUTPUT

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Copy image from staging to production ECR
      run: |
        # Pull image from staging ECR
        STAGING_IMAGE="${{ steps.login-ecr.outputs.registry }}/staging-go-microservice:${{ github.event.inputs.version }}"
        PRODUCTION_IMAGE="${{ steps.login-ecr.outputs.registry }}/production-go-microservice:${{ github.event.inputs.version }}"
        PRODUCTION_LATEST="${{ steps.login-ecr.outputs.registry }}/production-go-microservice:latest"
        
        echo "üì¶ Promoting image from staging to production..."
        echo "Source: $STAGING_IMAGE"
        echo "Target: $PRODUCTION_IMAGE"
        
        # Pull, tag, and push
        docker pull $STAGING_IMAGE
        docker tag $STAGING_IMAGE $PRODUCTION_IMAGE
        docker tag $STAGING_IMAGE $PRODUCTION_LATEST
        
        docker push $PRODUCTION_IMAGE
        docker push $PRODUCTION_LATEST
        
        echo "‚úÖ Image promoted to production ECR"

    - name: Blue/Green Deployment
      run: |
        echo "üîÑ Starting blue/green deployment..."
        
        # Get current running tasks (blue)
        CURRENT_TASKS=$(aws ecs list-tasks \
          --cluster production-cluster \
          --service production-go-microservice-service \
          --query 'taskArns[0]' \
          --output text \
          --region ${{ env.AWS_REGION }})
        
        echo "Current tasks: $CURRENT_TASKS"
        
        # Update service with new image (green)
        aws ecs update-service \
          --cluster production-cluster \
          --service production-go-microservice-service \
          --force-new-deployment \
          --region ${{ env.AWS_REGION }}
        
        # Wait for new tasks to be running and healthy
        echo "‚è≥ Waiting for new tasks to be healthy..."
        aws ecs wait services-stable \
          --cluster production-cluster \
          --services production-go-microservice-service \
          --region ${{ env.AWS_REGION }} \
          --cli-read-timeout 1200
        
        echo "‚úÖ Blue/green deployment completed successfully"

  post-deployment-tests:
    name: Post-deployment Validation
    runs-on: ubuntu-latest
    needs: deploy-production
    if: ${{ !inputs.skip_tests }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Smoke Tests
      run: |
        PROD_URL="http://${{ needs.deploy-production.outputs.alb-dns }}"
        echo "üß™ Running smoke tests against: $PROD_URL"
        
        # Health check
        echo "1. Health check..."
        curl -f "$PROD_URL/health" || exit 1
        
        # API functionality test
        echo "2. API functionality..."
        curl -f "$PROD_URL/api/users" || exit 1
        
        # Database connectivity test
        echo "3. Database connectivity..."
        curl -f "$PROD_URL/ready" || exit 1
        
        echo "‚úÖ All smoke tests passed"

    - name: Performance baseline check
      run: |
        PROD_URL="http://${{ needs.deploy-production.outputs.alb-dns }}"
        echo "üìä Running performance baseline check..."
        
        # Simple load test
        for i in {1..10}; do
          RESPONSE_TIME=$(curl -o /dev/null -s -w "%{time_total}" "$PROD_URL/health")
          echo "Request $i: ${RESPONSE_TIME}s"
          
          # Fail if response time > 2 seconds
          if (( $(echo "$RESPONSE_TIME > 2.0" | bc -l) )); then
            echo "‚ùå Response time too high: ${RESPONSE_TIME}s"
            exit 1
          fi
        done
        
        echo "‚úÖ Performance baseline check passed"

    - name: Monitor Error Rates
      run: |
        echo "Monitoring error rates for 5 minutes..."
        sleep 300
        # Check error rates and latency metrics

  rollback-on-failure:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: post-deployment-tests
    if: failure()
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Rollback Deployment
      run: |
        echo "Rolling back deployment..."
        
        # Get previous task definition
        PREVIOUS_TASK_DEF=$(aws ecs describe-services \
          --cluster production-cluster \
          --services production-go-microservice-service \
          --query 'services[0].taskDefinition' \
          --output text)
        
        # Update service to previous version
        aws ecs update-service \
          --cluster production-cluster \
          --service production-go-microservice-service \
          --task-definition $PREVIOUS_TASK_DEF

    - name: Notify Rollback
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#critical-alerts'
        text: |
          üö® PRODUCTION ROLLBACK EXECUTED üö®
          
          Deployment failed and has been rolled back.
          Immediate attention required!
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  notify-success:
    name: Notify Successful Deployment
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deployment-tests]
    if: success()
    
    steps:
    - name: Notify Success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        text: |
          üéâ PRODUCTION DEPLOYMENT SUCCESSFUL! üéâ
          
          - **Version**: ${{ github.event.inputs.version }}
          - **Environment**: Production
          - **Deployed by**: ${{ github.actor }}
          - **URL**: https://production-alb-url
          
          All systems green! üü¢
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}